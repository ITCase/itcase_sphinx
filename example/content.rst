Что такое reStructuredText?
===========================

**reStructuredText** (сокращение: **ReST**, расширение файла: **.rst**) — облегчённый язык разметки, который может быть преобразован в различные форматы — HTML, ePub, PDF и другие.

Документы с разметкой ReST являются обычными текстовыми файлами. С такими файлами очень легко работать посредством системы управления Git, которая позволяет отслеживать все вносимые изменения, легко принимать или отклонять их.

Помимо этого, документы в формате .rst можно открывать и редактировать в любом простом текстовом редакторе (например, в Блокноте). Это позволяет работать над документацией в любых условиях, на любых платформах, без необходимости использовать специализированное программное обеспечение.

Самое главное, что ReST позволяет сосредоточиться исключительно на структуре документа и не отвлекаться на его оформление.

ReST аналогичен языку разметки Markdown, но обладает более расширенным синтаксисом, особенно вкупе с генератором документации Sphinx.  ReST используется во многих проектах, например, на сайте GitHub. Также его используют многие генераторы статических сайтов такие, как: Hyde, Pelican и другие.


Базовые концепции
=================

Синтаксис reStructuredText опирается на следующие концепции:

* Отступы и пробелы имеют значение для команд разметки [#]_, но не имеют значения внутри текста (10 пробелов будут отображены как один);
* В командах (директивах) используется символ обратной кавычки «`», который располагается на клавише с буквой ``ё`` и символом ``~``. Использование обычных одинарных кавычек в командах не приведет к желаемым результатам.

.. [#] Не важно как делается отступ — пробелами или клавишей Tab, главное, чтобы они были одинакового размера.

Абзацы
======

Абзацы в :abbr:`ReST (reStructuredText)` отделяются друг от друга пустой строкой:
::

    Первый абзац...

    Строки параграфов начинаются от левой границы
    и отделяются параграфы друг от друга пустой строкой.

Заголовки
=========

:abbr:`ReST (reStructuredText)` поддерживает несколько уровней заголовков. Заголовки первого уровня (главы) подчеркиваются символом равно ``=``. Заголовки второго уровня (подглавы) подчеркиваются символом короткого тире или минуса ``-``. Заголовки третьего уровня (подпункта) подчеркиваются символом тильды  ``~``. Для параграфов допускается использовать подчеркивание символами двойных кавычек ``"``

Заголовки подчеркиваются (или отбиваются сверху и снизу) с помощью небуквенных
и нецифровых 7­-битных ASCII символов. Рекомендуется использовать: «``= ­ ` : ' " ~ ^ _ * + # < >``». Отбивка должна быть не короче текста заголовка.

::

    Заголовок 1 уровня
    ==================

    Заголовок 2 уровня
    ------------------

    Заголовок 3 уровня
    ~~~~~~~~~~~~~~~~~~

    Заголовок 4 уровня
    """"""""""""""""""

Результат:

Заголовок 1 уровня
==================
Заголовок 2 уровня
------------------
Заголовок 3 уровня
~~~~~~~~~~~~~~~~~~
Заголовок 4 уровня
""""""""""""""""""


Начертание
==========

Чтобы выделить текст **жирным** начертанием или *курсивным* используется обособление звездочками:
::

    **жирный текст**

    *курсив текст*

Результат:

**жирный текст**

*курсив текст*

.. attention:: Не допускается наличие пробелов между выделяемым словом и звездочкой, например, команда ``** жирный текст**`` не даст нужного эффекта.

Начертание текста ``«как есть»`` достигается обособлением двумя обратными кавычками:
::

    ``«как есть»``


Нумерованные списки
===================

Нумерованные списки создаются с помощью символа решетки с точкой ``#.``:
::

    #. Один
    #. Два
    #. Три

    Или:
    5. Пять
    6. Шесть
    #. Семь

Результат:

#. Один
#. Два
#. Три

Или:

5. Пять
6. Шесть
#. Семь


Маркированные списки
====================
Маркированные списки создаются с помощью символа звездочки ``*`` или дефиса ``-``. Пробелы после маркера обязательны:
::

    * Один
    * Два
    * Три

Результат:

* Один
* Два
* Три


Вложенные списки
================
::

    * Первый уровень
        * Второй уровень
            * Третий уровень
                * Четвертый уровень
                    * Пятый уровень

Результат:

* Первый уровень
    * Второй уровень
        * Третий уровень
            * Четвертый уровень
                * Пятый уровень

::

    #. Один
        * Маркер
    #. Два
        #. Номер

Результат:

#. Один
    * Маркер
#. Два
    #. Номер

